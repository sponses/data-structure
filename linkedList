//节点
class Node{
  constructor(element){
    this.element = element;
    this.next = null;
  }
}

//链表
class LinkedList{
  constructor(){
    this.head = null;
    this.length = 0;
  }
  
  //追加元素
  append(element){
    const node = new Node(element);
    let current = null;
    if(this.head===null){
      this.head = node;
    }else{
      current = this.head;
      while(current.next){
        current = current.next;
      }
      current.next = node;
    }
    this.length++;
  }
  
  //任意位置插入元素
  insert(position,element){
    if(position >= 0 && position <= this.length){
      const node = new Node(element);
      let current = this.head;
      let previous = null;
      let index = 0;
      if(position === 0){
        this.head = node;
      }else{
        while(index++ < position){
          previous = current;
          current = current.next;
        }
        node.next = current;
        previous.next = node;
      }
      this.length++;
      return true;
      }
      return false;
}

//移除指定位置的元素
removeAt(position){
  if(position >=0 && position < this.length){
    let current = this.head;
    let previous = null;
    let index = 0;
    if(position === 0){
      this.head = current.next;
    }else{
      while(index++ < position){
        previous = current;
        current = current.next;
      }
      previous.next = current.next;
    }
    this.length--;
    return current.element;
  }
  return null;
  
}

//寻找元素下标
findIndex(element){
  let current = this.head;
  let index = -1;
  while(current){
    if(element === current.element){
      return index + 1;
    }else{
      current = current.next;
    }
  }
  return -1;
}

//删除指定文档
remove(element){
  let index = this.findIndex(element);
  if(index >= 0){
    let current = this.head;
    let previous = null;
    if(index === 0){
      this.head = current.next;
    }else{
      while(index){
        previous = current;
        current = current.next;
        index--;
      }
      previous.next = current.next;
      this.length--;
      return current.element;
    }
    return false;
    
}
     
//双向链表

//链表节点
class Node{
  constructor(element){
    this.element = element;
    this.prev = null;
    this.next = null;
  }
}

//双向链表
class DoubleLinkedList{
  constructor(){
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  
  //任意位置插入元素
  insert(position,element){
    if(position >= 0 && position <= this.length){
      const node = new Node(element);
      let current = this.head;
      let previous = null;
      let index = 0;
      if(position === 0){
        if(!this.head){
          this.head = node;
          this.tail = node;
        }else{
          node.next = current;
          this.head = node;
          current.prev = node;
        }
      }else if(position === this.length){
        current = this.tail;
        current.next = node;
        node.prev = current;
        this.tail = node;
      }else{
        while(index++ < position){
          previous = current;
          current = current.next;
        }
        node.next = current;
        previous.next = node;
        current.prev = node;
        node.prev = previous;
      }
      this.length++;
      return true;
    }
    return false;
    
 }
  
  
  
  


          
